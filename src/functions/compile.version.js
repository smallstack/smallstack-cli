var fs = require("fs-extra");
var path = require("path");

var config = require("../config");


module.exports = function () {


    console.log("Persisting Versions...");

    // smallstack version
    var versionCheckFile = path.join(config.meteorDirectory, "packages", "smallstack-core", "package.js");
    if (!fs.existsSync(versionCheckFile)) {
        throw new Error("Version cannot be persisted since file does not exist : " + versionCheckFile);
    }
    var versionCheckFileContent = fs.readFileSync(versionCheckFile);
    var regex = /([\'|\"]?version[\'|\"]?[ ]*:[ ]*[\'|\"]?)(\d+\.\d+\.\d+-?[a-zA-Z]*)([\'|\"]?)/;
    var matches = regex.exec("" + versionCheckFileContent);
    var version = matches[2];
    if (version === null || version === undefined)
        throw new Error("Could not find version in file : ", versionCheckFile);

    var content = "";
    content += "// THIS FILE IS AUTO-GENERATED BY 'smallstack compile'! PLEASE IGNORE THE FILE IN YOUR SCM!\n\n";
    content += "declare var versions: { smallstack: string, project: string, compileDate: number, projectName: string };\n\n";
    content += "versions = {\n";
    content += "\tsmallstack: \"" + version + "\",\n";
    content += "\tproject: \"" + config.version + "\",\n";
    content += "\tcompileDate: " + new Date().getTime() + ",\n";
    content += "\tprojectName: \"" + config.name + "\"\n";
    content += "}\n\nif (Meteor.isClient) {\n";
    content += "\tconsole.log('smallstack: ' + versions.smallstack);\n";
    content += "\tconsole.log(versions.projectName + ': ' + versions.project);\n";
    content += "\tconsole.log('compile time: ' + moment(versions.compileDate).format());\n";
    content += "\tconsole.log(' ');\n}";

    fs.ensureDirSync(path.join(config.meteorDirectory, "shared"));
    fs.writeFileSync(path.join(config.meteorDirectory, "shared", "versions.ts"), content);

}